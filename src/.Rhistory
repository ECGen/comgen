all(rownames(as.matrix(rflp.d)) ==
rownames(as.matrix(prb.mu.d))),
all(rownames(as.matrix(rflp.d)) ==
rownames(as.matrix(onc.com.mu.d))))))){
warning("Warning: distance matrices are not aligned.")
}else{
print("Distance matrices good to go!")
}
nperm <- 20
if (!(file.exists("../data/lcn/nest_rel_onc.rda"))){
nest.onc <- nestedness(onc.com.rel[, colnames(onc.com.rel) != "ds"],
n.nulls = 999)
dput(nest.onc, "../data/lcn/nest_rel_onc.rda")
}else{
nest.onc <- dget("../data/lcn/nest_rel_onc.rda")
}
if (!(file.exists("../data/lcn/null_mod_onc.csv"))){
obs.mod.onc <- bipartite::computeModules(
onc.com.rel[, colnames(onc.com.rel) != "ds"])
mods.onc <- tail(apply(slot(obs.mod.onc, "modules"), 2,
function(x) sum(sign(x[2:length(x)]) *
(1:(length(x) - 1)))),
sum(dim(onc.com[, colnames(onc.com) != "ds"])))
mods.onc <- list(sp = tail(mods.onc,
ncol(onc.com[, colnames(onc.com) != "ds"])),
tree = head(mods.onc, nrow(onc.com)))
sim.onc <- lapply(1:nperm, sim.com, x = onc.q)
sim.onc <- lapply(sim.onc, function(x) x / max(x))
nul.mod.onc <- lapply(sim.onc, function(x) bipartite::computeModules(x))
nul.mod.onc <- unlist(lapply(nul.mod.onc, slot, "likelihood"))
dput(mods.onc, "../data/lcn/mod_list_onc.rda")
write.csv(slot(obs.mod.onc, "likelihood"),
"../data/lcn/obs_mod_onc.csv",
row.names = FALSE)
write.csv(nul.mod.onc,
"../data/lcn/null_mod_onc.csv",
row.names = FALSE)
}else{
obs.mod.onc <- read.csv("../data/lcn/obs_mod_onc.csv")[1]
nul.mod.onc <- read.csv("../data/lcn/null_mod_onc.csv")[,1]
z.mod.onc <- (obs.mod.onc - mean(nul.mod.onc)) / sd(nul.mod.onc)
mods.onc <- dget("../data/lcn/mod_list_onc.rda")
}
pval.mod.onc <- length(nul.mod.onc[nul.mod.onc >= obs.mod.onc]) /
length(nul.mod.onc)
if (pval.mod.onc == 0){pval.mod.onc <- 1/nperm}
z.mod.onc <- (obs.mod.onc - mean(nul.mod.onc)) / sd(nul.mod.onc)
bp.mod.onc <- round(unlist(c(nperm = nperm, obs = obs.mod.onc,
mu.sim = mean(nul.mod.onc), sd.sim = sd(nul.mod.onc),
z = z.mod.onc, p.value = pval.mod.onc)), 5)
if (!file.exists("../data/lcn/onc_nmds.csv")){
nms.info.onc <- capture.output(nms.onc <- nmds.min(nmds(
vegdist(onc.com.rel), 2, 2)))
write.csv(nms.onc, "../data/lcn/onc_nmds.csv",
row.names = FALSE)
write.table(nms.info.onc,
"../data/lcn/onc_nmds_info.txt",
col.names = FALSE, row.names = FALSE)
}else{nms.onc <- read.csv("../data/lcn/onc_nmds.csv")}
if (!(file.exists("../data/lcn/conet_nmds.csv"))){
cn.nmds.stats.onc <- capture.output(
cn.nms.onc <- nmds.min(nmds(cn.d.onc, 2, 2)))
write.csv(cn.nms.onc, "../data/lcn/conet_nmds.csv",
row.names = FALSE)
write.table(cn.nmds.stats.onc,
"../data/lcn/conet_nmds_info.txt",
col.names = FALSE, row.names = FALSE)
}else{cn.nms.onc <- read.csv("../data/lcn/conet_nmds.csv")}
nv.onc <- envfit(cn.nms.onc, data.frame(onc.com[, colnames(onc.com) != 'ds'],
R = onc.rough,
C = onc.ns[, c("C")],
A = ptc.onc))
cv.onc <- envfit(nms.onc, data.frame(onc.com[, colnames(onc.com) != 'ds'],
R = onc.rough,
C = onc.ns[, c("C")],
A = ptc.onc))
omu <- apply(onc.com[,colnames(onc.com) != 'ds'], 2,
function(x,g) tapply(x,g,mean),g=onc.geno)
oms <- tapply(onc.ses, onc.geno, mean)
oms.d <- dist(oms[match(rownames(as.matrix(rflp.d)),names(oms))])
oprbmu <- tapply(onc.rough,onc.geno,mean)
oprbmu <- oprbmu[match(rownames(as.matrix(rflp.d)),names(oprbmu))]
coord <- read.csv("../data/lcn/lcn_coord_onc.csv")
rownames(coord) <- coord[,1]
coord <- coord[,-1]
tree <- onc.geno
for (i in 1:length(unique(onc.geno))){
tree[onc.geno == unique(onc.geno)[i]] <-
1:length(tree[onc.geno == unique(onc.geno)[i]])
}
tree <- factor(tree)
tree.id <- do.call(rbind, strsplit(names(ptc.onc), split = " "))[, 1]
onc.nc <- read.csv("../data/lcn/ONC_phytochem_NC.csv")
onc.tan <- read.csv("../data/lcn/ONC_phytochem_tannin.csv")
onc.nc[, 1] <- as.character(paste0("N", gsub("-", "\\.", onc.nc[, 1])))
onc.tan[, 1] <- as.character(paste0("N", gsub("-", "\\.", onc.tan[, 1])))
colnames(onc.nc)[1:4] <- c("tree.id", "sample.mass", "N", "C")
colnames(onc.tan)[1] <- "tree.id"
colnames(onc.tan)[grep("X.CT", colnames(onc.tan))] <- "CT"
onc.nc$rCN <- onc.nc$N / onc.nc$C
onc.ph <- read.csv("../data/lcn/ONC_Bark_lichen_pH_data.csv")
onc.ph[, "tree.id"] <- gsub("-", ".", onc.ph[, "tree.id"])
onc.ph[, "tree.id"] <- gsub("\\.0", "\\.", onc.ph[, "tree.id"])
onc.ph[onc.ph[, "tree.id"] == "N7.16", "tree.id"] <- "N7.10"
onc.ph[!is.na(onc.ph[, "pH2"]), "pH"] <-
apply(onc.ph[!is.na(onc.ph[, "pH2"]), c("pH","pH2")], 1, mean)
onc.dat <- data.frame(tree.id, PC = ptc.onc, SR = spr.onc,
SD = spd.onc, SE = spe.onc,
geno = factor(onc.geno), tree = tree,
BR = onc.rough, onc.ns[, c("L", "Cen")])
onc.ph <- onc.ph[onc.ph[, "tree.id"] %in% onc.dat[, "tree.id"], ]
onc.ph <- onc.ph[match(onc.dat[, "tree.id"], onc.ph[, "tree.id"]), ]
onc.dat <- data.frame(onc.dat,
C = onc.nc[match(onc.dat[, "tree.id"],
onc.nc[, "tree.id"]), "C"],
N = onc.nc[match(onc.dat[, "tree.id"],
onc.nc[, "tree.id"]), "N"],
CN = onc.nc[match(onc.dat[, "tree.id"],
onc.nc[, "tree.id"]), "rCN"],
CT = onc.tan[match(onc.dat[, "tree.id"],
onc.tan[, "tree.id"]), "CT"],
pH = onc.ph[, "pH"])
pw.onc <- onc.com.rel[, colnames(onc.com.rel) != "ds"]
pw.onc <- pw.onc[order(apply(pw.onc, 1, sum), decreasing = TRUE),
order(apply(pw.onc, 2, sum), decreasing = TRUE)]
rownames(pw.onc) <- onc.geno
col.pal <- RColorBrewer::brewer.pal((max(unlist(mods.onc))), "Paired")
if (file.exists("../data/lcn/nms_com_onc.rda")){
nms.com <- dget(file = "../data/lcn/nms_com_onc.rda")
}else{
set.seed(12345)
nms.com <- nmds(vegdist(onc.com.rel), 2, 3)
dput(nms.com, file = "../data/lcn/nms_com_onc.rda")
}
if (file.exists("../data/lcn/nms_cn_onc.rda")){
nms.cn <- dget(file = "../data/lcn/nms_cn_onc.rda")
}else{
set.seed(12345)
nms.cn <- nmds(cn.d.onc, 1, 2)
dput(nms.cn, file = "../data/lcn/nms_cn_onc.rda")
}
ord.com <- nmds.min(nms.com, 3)
ord.cn <- nmds.min(nms.cn, 2)
vec.env <- onc.dat[, c("BR", "PC", "SR", "L", "Cen")]
vec.com <- envfit(ord.com, env = vec.env, perm = 10000,
choices = c(1,2))
vec.cn <- envfit(ord.cn, env = vec.env, perm = 10000,
choices = c(1,2))
if (!("mod_obsval_onc.csv" %in% dir("../data/lcn"))){
mod.onc <- slot(bipartite::computeModules(rel(onc.com[, -ncol(onc.com)]),
deep = FALSE),
"likelihood")
write.csv(mod.onc, file = "../data/lcn/mod_obsval_onc.csv", row.names = FALSE)
}else{
mod.onc <- read.csv(file = "../data/lcn/mod_obsval_onc.csv")[, 1]
}
if (!("mod_simvals_onc.csv" %in% dir("../data/lcn"))){
onc.sweb <- simulate(vegan::nullmodel(onc.com[, -ncol(onc.com)],
method = "swsh_samp_c"), 99)
for (i in 1:dim(onc.sweb)[3]){onc.sweb[,, i] <- rel(onc.sweb[,, i])}
onc.smod <- apply(onc.sweb, 3, bipartite::computeModules)
mods.onc.sweb <- unlist(lapply(onc.smod, slot, name = "likelihood"))
write.csv(mods.onc.sweb,
file = "../data/lcn/mod_simvals_onc.csv",
row.names = FALSE)
}else{
mods.onc.sweb <- read.csv(
file = "../data/lcn/mod_simvals_onc.csv")[, 1]
}
if (!("mod_obsval_pit.csv" %in% dir("../data/lcn"))){
mod.pit <- slot(bipartite::computeModules(rel(pit.com), deep = FALSE),
"likelihood")
write.csv(mod.pit,
file = "../data/lcn/mod_obsval_pit.csv",
row.names = FALSE)
}else{
mod.pit <- read.csv(
file = "../data/lcn/mod_obsval_pit.csv")[, 1]
}
if (!("mod_simvals_pit.csv" %in% dir("../data/lcn"))){
pit.sweb <- simulate(vegan::nullmodel(pit.com, method = "swsh_samp_c"), 99)
for (i in 1:dim(pit.sweb)[3]){pit.sweb[,, i] <- rel(pit.sweb[,, i])}
pit.smod <- apply(pit.sweb, 3, bipartite::computeModules)
mods.pit.sweb <- unlist(lapply(pit.smod, slot, name = "likelihood"))
write.csv(mods.pit.sweb,
file = "../data/lcn/mod_simvals_pit.csv",
row.names = FALSE)
}else{
mods.pit.sweb <- read.csv(
file = "../data/lcn/mod_simvals_pit.csv")[, 1]
}
x <- read.csv("../data/lcn/lco_Apr2012.csv")
x <- x[,colnames(x)!='NOTES.']
x <- x[,colnames(x)!='dead']
x <- na.omit(x)
x <- x[x$tree != 'gnu.44',]
x <- x[x$tree != 'll.6',]
x$tree <- factor(as.character(x$tree))
lec.sp <- apply(x[,c(6,8,10,18)], 1, function(x) sign(any(x!=0)))
x <- cbind(x, lec = lec.sp)
x <- x[, -c(6,8,10,18)]
x <- x[, colnames(x) != 'physcioid']
quads <- paste(x$tree, x$quadrat)
colnames(x)[5:ncol(x)] <- c('Xg','Cs', 'Xm', 'fgb', 'Rs',
'Pm' ,'Pa', 'Pu','Ch','Ls')
x <- x[colnames(x) != 'fgb']
x.q <- split(x,quads)
wild.com <- split(x,x$tree)
wild.com <- do.call(rbind,lapply(wild.com,function(x) apply(x[,-1:-4],2,sum)))
wild.com.rel <- apply(wild.com, 2, function(x) x/max(x))
wild.com.rel[is.na(wild.com.rel)] <- 0
wild.q <- lapply(split(x,x$tree),function(x) x[,-1:-4])
env <- read.csv("../data/lcn/Uinta2012_all_data_from_Lamit.csv")
env <- env[is.na(env$Pct.Roughness) == FALSE,]
env[,1] <- sub('\\?','',
sub('\\.0','\\.',
sub('\\_','\\.',
sub('\\-','\\.',tolower(as.character(env[,1]))))))
env[env[,1] == 'll.6_(znu.29)',1] <- 'll.6'
env[env[,1] == 'gnu.85.1ftaway',1] <- 'gnu.85'
env$Quad.Loc <- as.character(sapply(as.character(env$Quad.Loc),
function(x)
unlist(strsplit(x,split='_'))[2]))
env$Quad.Loc <- sub('\\-','\\.',env$Quad.Loc)
env$Quad.Loc <- paste('n',env$Quad.Loc,sep='')
env <- env[env$Aspect!='South',]
env.tid <- paste(env$Tree.ID,env$Quad.Loc)
all(names(x.q)%in%env.tid)
all(env.tid[match(names(x.q),env.tid)] == names(x.q))
env <- env[match(names(x.q),env.tid),]
x.split <- paste(x$tree,x$quadrat,sep='_')
env.split <- paste(env$Tree.ID,env$Quad.Loc)
x.split <- as.character(x$tree)
env.split <- as.character(env$Tree.ID)
prb.wild <- tapply(env$Pct.Roughness,env.split,mean) #percent rough bark
age <- read.csv("../data/lcn/UintaMaster_LichenHeritNL_FallSpring_2012_ForLau.csv")
dbh <- age$DBH.cm_01
age.final <- age$AgeFinal.U
age <- data.frame(tree.id = age[,1], age.final = age$AgeFinal.U)
age[,1] <- tolower(age[,1])
age[,1] <- sub('_','\\.',age[,1])
age[,1] <- sub('-','\\.',age[,1])
age[,1] <- sub('\\?','',age[,1])
age[,1] <- sub('\\.0','\\.',age[,1])
age[age[,1] == 'gnu.85.1ftaway',1] <- 'gnu.85'
gnu19.dbh <- dbh[age$tree.id == 'gnu.19']
new <- data.frame(dbh=seq(min(dbh),max(dbh),by=0.1))
age.final <- na.omit(age.final)
pred.age <- predict(lm(age.final~dbh,data=age),new)
gnu19.age <- as.numeric(pred.age[new[,1] == gnu19.dbh])
tree.age <- age[match(names(prb.wild), age[,1]),2]
tree.age[is.na(tree.age)] <- gnu19.age
names(tree.age) <- age[match(names(prb.wild),age[,1]),1]
age <- tree.age
pc.wild <- unlist(lapply(wild.q,
function(x) sum(apply(x, 1,
function(x) sign(sum(x))))))
sr.wild <- unlist(lapply(wild.q, function(x) sum(sign(apply(x, 2, sum)))))
cn.wild <- lapply(wild.q, coNet)
cn.mu.wild <- meanNet(cn.wild)
cn.d.wild <- distNet(cn.wild, method = 'bc')
ns.wild <- do.call(rbind, lapply(lapply(cn.wild, function(x)
abs(sign(x))), enaR:::structure.statistics))
dcen.wild <- unlist(lapply(cn.wild, function(x)
sna::centralization(x, FUN = sna::degree, normalize = FALSE)))
wild.dat <- data.frame(tree = names(tree.age),
age = tree.age, BR = prb.wild,
PC = pc.wild, SR = sr.wild,
L = ns.wild[, "L"], Cen = dcen.wild)
library(vegan)
install.packages("vegan")
getwd()
l.dat
l.dat
com
com.moss
library(ecodist)
adonis
mantel
q()
n
history()
library(knitr)
knit("rln.Rmd")
rmarkdown::render()
com.moss
apply(com.moss, 2, mean)
apply(com.moss, 2, max)
library(vegan)
com.ds.rel
com
com.ds
com.ds.rel
com.ds.rel
com.ds.rel
com.ds.rel
com.ds.rel
ptab.moth
colnames(l.dat)
rmarkdown::render("rln.Rmd")
rmarkdown::render("rln.Rmd")
install.packages("codetools")
rmarkdown::render("rln.Rmd")
rmarkdown::render("rln.Rmd")
?specaccum
summary(spa.all)
summary(specaccum(com), method = "random")
summary(specaccum(com, method = "random"))
plot(specaccum(com, method = "random"))
plot(specaccum(com)
)
rmarkdown::render("rln.Rmd")
rmarkdown::render("rln.Rmd")
com
l.dat[, "Moth"]
A
abun
tapply(abun, l.dat[, "Tree.pairs"], diff)
hist(tapply(abun, l.dat[, "Tree.pairs"], diff))
t.test(tapply(abun, l.dat[, "Tree.pairs"], diff))
t.test(tapply(rich, l.dat[, "Tree.pairs"], diff))
hist(tapply(rich, l.dat[, "Tree.pairs"], diff))
tt.a <- t.test(tapply(abun, l.dat[, "Tree.pairs"], diff), alt = "less")
tt.a
t.test(tapply(abun, l.dat[, "Tree.pairs"], diff))
com[l.dat[, "Moth"] == 0, ]

sign(com)
rich
max(rich)
Moth
moth
rich[l.dat[, "Moth"] == 0,]
tapply(rich, l.dat[, "Moth"], range)
tapply(abun, l.dat[, "Moth"], range)
tapply(rich, l.dat[, "Moth"], mean)
tapply(abun, l.dat[, "Moth"], mean)
rmarkdown::render("rln.Rmd")
tapply(rich, l.dat[, "Moth"], mean)
tapply(rich, l.dat[, "Moth"], max)
rmarkdown::render("rln.Rmd")
l.dat
head(l.dat)
com.moss
apply(com.moss, 1, sum)
max(apply(com.moss, 1, sum))
colnames(l.dat)
ptab.env
ptab.env
ptab.env
capture.output(ptab.env,file="~/test.doc")
capture.output(ptab.env,file="~/test.excel")
summary(ptab.env)
ptab.env
as.dataframe(ptab.env)
as.data.frame(ptab.env)
capture.output(as.data.frame(ptab.env), file = "~/test.txt")
capture.output(isp[, -2], file = "~/isp_table.tsv")
capture.output(isp[, -2], file = "~/isp_table.txt")
capture.output(isp[, -2], file = "~/isp_table.txt")
isp
capture.output(isp[, c(1,3,4,5)], file = "~/isp_table.txt")
capture.output(as.data.frame(ptab.moth), file = "~/permanova_1.txt")
q()
y
install.packages("vegan")
setwd("..")
getwd()
library(comgenR)
source("../comgenR/R/mdc.plot.R")
mdc.plot
isp.dif
?barplot
ispd.eb
ispd.mu
melt(isp.dif)
isp
isp.dif
isp.dif
isp.com
isp.dif
q()
n
rmarkdown::render("rln.Rmd")
getwd()
l.dat <- read.csv("./data/scrl/spp_env_combined.csv")
setwd()
setwd()
setwd("..")
getwd()
rmarkdown::render("rln.Rmd")
rmarkdown::render("src/rln.Rmd")
getwd()
setwd("src")
rmarkdown::render("rln.Rmd")
rmarkdown::render("rln.Rmd")
spa.all
spa.sus
ind.spp
isp
kable(ptab.moth.rel)
ptab.moth
ptab.moth.rel
head(com.ds.rel
)
q()
n
?barplot
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
isp.mu
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
isp.mu
isp.mu
rmarkdown::render("scrl_report.Rmd")
ard.se
as.vector(rbind(isp.mu + isp.se, isp.mu - isp.se))
?lines
sapply(bp.out, rep, 2)
rbind(isp.mu + isp.se, isp.mu - isp.se)
isp.mu
isp.se
(isp.mu + isp.se)
(isp.mu - isp.se)
as.vector(sapply(bp.out, rep, 2))
as.vector(rbind(isp.mu + isp.se, isp.mu - isp.se))
plot(1:10)
lines(c(1, 2), c(1, 2)
)
lines(c(1, 2, 2, 3), c(1, 2, 2, 3))
bp.out
sapply(bp.out, rep, 2)
as.vector(sapply(bp.out, rep, 2))
?lines
plot(1:10)
lines(c(1, 2, 3, 4), c(1, 2, 3, 4))
bp.out
?segments
?barplot
?barplot
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
kable(ptab.env)
cor.test(tapply(l.dat[, "Big.rocks.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff))
cor.test(tapply(l.dat[, "Big.rocks.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff))
cor.test(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff))
cor.test(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff))

cor.test(tapply(l.dat[, "Big.rocks.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff))

cor.test(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff))

colnames(l.dat)
cor.test(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Shrubs.."], l.dat[, "Tree.pairs"], diff))

cor.test(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff))

plot(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff),

         tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff))
cor.test(tapply(l.dat[, "Big.rocks.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff))

cor.test(tapply(l.dat[, "Big.rocks.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff))

cor.test(tapply(l.dat[, "Small.rocks.."], l.dat[, "Tree.pairs"], diff),
         tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff))

hist(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff))
par(mfrow = c(1,2))
bp.out <- barplot(ard.mu, col = "darkgrey", ylim = c(-5, 0), 
                  ylab = "Difference (S - R)", border = "NA")
segments(bp.out[, 1], ard.mu + ard.se,
         bp.out[, 1], ard.mu - ard.se, 
         lwd = 1.5)
bp.out <- barplot(isp.mu, col = "darkgrey", ylim = c(-0.5, 0), 
                  ylab = "Difference (S - R)", border = "NA",
			axisnames = TRUE, 
			names.arg = sapply(names(isp.mu), 
				function(x) 
                                    paste(c(substr(x, 1, 1), 
                                            substr(x, 4, 4)), collapse = "")))
segments(bp.out[, 1], isp.mu + isp.se,
         bp.out[, 1], isp.mu - isp.se, 
         lwd = 1.5)

par(mfrow = c(1,2))
bp.out <- barplot(ard.mu, col = "darkgrey", ylim = c(-5, 0), 
                  ylab = "Difference (S - R)", border = "NA")
segments(bp.out[, 1], ard.mu + ard.se,
         bp.out[, 1], ard.mu - ard.se, 
         lwd = 1.5)
legend("topright", "A")
bp.out <- barplot(isp.mu, col = "darkgrey", ylim = c(-0.5, 0), 
                  ylab = "Difference (S - R)", border = "NA",
			axisnames = TRUE, 
			names.arg = sapply(names(isp.mu), 
				function(x) 
                                    paste(c(substr(x, 1, 1), 
                                            substr(x, 4, 4)), collapse = "")))
segments(bp.out[, 1], isp.mu + isp.se,
         bp.out[, 1], isp.mu - isp.se, 
         lwd = 1.5)


hist(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff))
hist(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = "")
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""))
abline(v = mean(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""))
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""), main = "")
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""), main = "")
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""))
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""))
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""), main = "")
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""), main = "")
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = "", main = ""))
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""), title = "")
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""), main = NULL)
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""), main = "")
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), main = ""), main = "", xlab = "Litter Difference (S - R)")
plot(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), 
	tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff))

plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff)), main = "", xlab = "Litter Difference (S - R)")
par(mfrow = c(1,2), width = 9, height = 5)
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff)), main = "", xlab = "Litter Difference (S - R)")
plot(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), 
	tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff), 
	xlab = "Litter Difference (S - R)", ylab = "Light Difference (S - R)")

par(mfrow = c(1,2))
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff)), main = "", xlab = "Litter Difference (S - R)")
plot(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), 
	tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff), 
	xlab = "Litter Difference (S - R)", ylab = "Light Difference (S - R)")

par(mfrow = c(1,2))
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff)), main = "", xlab = "Litter Difference (S - R)")
plot(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), 
	tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff), 
	xlab = "Litter Difference (S - R)", ylab = "Light Difference (S - R)",
	pch = 19)

par(mfrow = c(1,2))
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff)), 
	main = "", xlab = "Litter Difference (S - R)")
abline(v = tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff),
	lwd = 0.5)
plot(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), 
	tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff), 
	xlab = "Litter Difference (S - R)", ylab = "Light Difference (S - R)",
	pch = 19)

par(mfrow = c(1,2))
plot(density(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff)), 
	main = "", xlab = "Litter Difference (S - R)")
abline(v = mean(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff)),
	lwd = 0.5)
plot(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff), 
	tapply(l.dat[, "Light...average"], l.dat[, "Tree.pairs"], diff), 
	xlab = "Litter Difference (S - R)", ylab = "Light Difference (S - R)",
	pch = 19)

rmarkdown::render("scrl_report.Rmd")
mean(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff))
mean(tapply(l.dat[, "Litter.."], l.dat[, "Tree.pairs"], diff))
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
getwd()
getwd()
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
rmarkdown::render("scrl_report.Rmd")
q()
m
n
